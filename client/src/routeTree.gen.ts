/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as LoginVerifyRouteImport } from './routes/login/verify'
import { Route as LoginSetupProfileRouteImport } from './routes/login/setup-profile'
import { Route as LoginKycRouteImport } from './routes/login/kyc'
import { Route as AppRewardsRouteImport } from './routes/_app/rewards'

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRouteRoute,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const LoginVerifyRoute = LoginVerifyRouteImport.update({
  id: '/verify',
  path: '/verify',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginSetupProfileRoute = LoginSetupProfileRouteImport.update({
  id: '/setup-profile',
  path: '/setup-profile',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginKycRoute = LoginKycRouteImport.update({
  id: '/kyc',
  path: '/kyc',
  getParentRoute: () => LoginRouteRoute,
} as any)
const AppRewardsRoute = AppRewardsRouteImport.update({
  id: '/rewards',
  path: '/rewards',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRouteRouteWithChildren
  '/rewards': typeof AppRewardsRoute
  '/login/kyc': typeof LoginKycRoute
  '/login/setup-profile': typeof LoginSetupProfileRoute
  '/login/verify': typeof LoginVerifyRoute
  '/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRoutesByTo {
  '/rewards': typeof AppRewardsRoute
  '/login/kyc': typeof LoginKycRoute
  '/login/setup-profile': typeof LoginSetupProfileRoute
  '/login/verify': typeof LoginVerifyRoute
  '/': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRouteRouteWithChildren
  '/_app/rewards': typeof AppRewardsRoute
  '/login/kyc': typeof LoginKycRoute
  '/login/setup-profile': typeof LoginSetupProfileRoute
  '/login/verify': typeof LoginVerifyRoute
  '/_app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/rewards'
    | '/login/kyc'
    | '/login/setup-profile'
    | '/login/verify'
    | '/'
    | '/login/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/rewards'
    | '/login/kyc'
    | '/login/setup-profile'
    | '/login/verify'
    | '/'
    | '/login'
  id:
    | '__root__'
    | '/_app'
    | '/login'
    | '/_app/rewards'
    | '/login/kyc'
    | '/login/setup-profile'
    | '/login/verify'
    | '/_app/'
    | '/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/login/verify': {
      id: '/login/verify'
      path: '/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof LoginVerifyRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/login/setup-profile': {
      id: '/login/setup-profile'
      path: '/setup-profile'
      fullPath: '/login/setup-profile'
      preLoaderRoute: typeof LoginSetupProfileRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/login/kyc': {
      id: '/login/kyc'
      path: '/kyc'
      fullPath: '/login/kyc'
      preLoaderRoute: typeof LoginKycRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/_app/rewards': {
      id: '/_app/rewards'
      path: '/rewards'
      fullPath: '/rewards'
      preLoaderRoute: typeof AppRewardsRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppRewardsRoute: typeof AppRewardsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppRewardsRoute: AppRewardsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface LoginRouteRouteChildren {
  LoginKycRoute: typeof LoginKycRoute
  LoginSetupProfileRoute: typeof LoginSetupProfileRoute
  LoginVerifyRoute: typeof LoginVerifyRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginKycRoute: LoginKycRoute,
  LoginSetupProfileRoute: LoginSetupProfileRoute,
  LoginVerifyRoute: LoginVerifyRoute,
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
